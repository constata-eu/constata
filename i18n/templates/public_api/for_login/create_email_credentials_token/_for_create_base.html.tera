{% extends "public_api/for_login/_base.html.tera" %}

{% block title %}Constata.eu | Crear Credenciales{% endblock title %}

{% block to_log_view %}
  <div class="d-flex py-5 py-md-5 my-2 align-content-center flex-column flex-wrap container container-constata">
    <div class="column g-6 bg-white text-dark rounded p-3">
      {% block __welcome %}{% endblock __welcome %}
      <button class="btn btn-blue btn-lg btn-block create-credentials" onclick="showModal(modalEmail)">
        <div class="h5 font-weight-bold">
          {% block __create_credentials %}{% endblock __create_credentials %}
        </div>
      </button>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-email" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body">
          <p>
            {% block __about_to_link_key %}{% endblock __about_to_link_key %}
          </p>
        </div>
        <div class="modal-footer">
          <button type="button" onclick="hideAllModals()" class="btn btn-secondary font-weight-bold">
            {% block __cancel %}{% endblock __cancel %}
          </button>
          <button type="button" onclick="showModal(modalPassword)" class="btn btn-blue btn-primary font-weight-bold continue">
            {% block __continue %}{% endblock __continue %}
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-password" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            {% block __enter_daily_password %}{% endblock __enter_daily_password %}
          </h5>
          <p>1/4</p>
        </div>
        <div class="modal-body">
          <form class="needs-validation form-password" novalidate>
            <div class="col-md m-1">
              <label for="password" class="form-label">
                {% block __daily_password %}{% endblock __daily_password %}
              </label>
              <input id="password" class="form-control" type="password" />
              <div class="invalid-feedback">
                {% block __setup_daily_eight_chars_min %}{% endblock __setup_daily_eight_chars_min %}
              </div>
            </div>
            <div class="col-md m-1">
              <label for="confirm-password" class="form-label">
                {% block __confirm_daily_pass %}{% endblock __confirm_daily_pass %}
              </label>
              <input id="confirm-password" class="form-control" type="password" />
              <div class="invalid-feedback">
                {% block __passwords_must_match %}{% endblock __passwords_must_match %}
              </div>
            </div>
            <div class="col-md m-1 m-t-2">
              <button class="btn btn-blue btn-lg btn-block font-weight-bold confirm-for-password" type="submit">
                {% block __continue_daily_pass %}{% endblock __continue_daily_pass %}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-master-seed-password" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            {% block __enter_backup_password %}{% endblock __enter_backup_password %}
          </h5>
          <p>2/4</p>
        </div>
        <div class="modal-body">
          <form class="needs-validation form-master-password" novalidate>
            <div class="col-md m-1">
              <label for="master-seed-password" class="form-label">
                {% block __backup_password %}{% endblock __backup_password %}
              </label>
              <input id="master-seed-password" class="form-control" type="password" />
              <div class="invalid-feedback">
                {% block __backup_pass_eight_chars_min %}{% endblock __backup_pass_eight_chars_min %}
              </div>
            </div>
            <div class="col-md m-1">
              <label for="confirm-master-seed-password" class="form-label">
                {% block __confirm_backup_pass %}{% endblock __confirm_backup_pass %}
              </label>
              <input id="confirm-master-seed-password" class="form-control" type="password" />
              <div class="invalid-feedback">
                {% block __backup_passwords_must_match %}{% endblock __backup_passwords_must_match %}
              </div>
            </div>
            <div class="col-md m-1 m-t-2">
              <button class="btn btn-blue btn-lg btn-block font-weight-bold confirm-for-master-seed-password" type="submit">
                {% block __save %}{% endblock __save %}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="12-palabras" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            {% block __twelve_words %}{% endblock __twelve_words %}
          </h5>
          <p>3/4</p>
        </div>
        <div class="modal-body">
          {% block __twelve_words_body %}{% endblock __twelve_words_body %}
          <p id="12-palabras-content"></p>
        </div>
        <div class="modal-footer">
          <button type="button" onclick="showModalConfirmation()" class="btn btn-blue btn-primary font-weight-bold download-conf">
            {% block __download_credentials %}{% endblock __download_credentials %}
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-confirmation" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body">
           {% block __sure_to_quit %}{% endblock __sure_to_quit %}
        </div>
        <div class="modal-footer">
          <button type="button" onclick="showModal(modal12palabras)" class="btn btn-secondary font-weight-bold">
            {% block __back %}{% endblock __back %}
          </button>
          <button type="button" onclick="downloadConfig()" class="btn btn-blue btn-primary font-weight-bold confirm-download-conf">
            {% block __continue_quit %}{% endblock __continue_quit %}
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-finish" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title"></h5>
          <p>4/4</p>
        </div>
        <div class="modal-body">
          {% block __success %}{% endblock __success %}
        </div>
        <div class="modal-footer">
          <button type="button" onclick="hideAllModals()" class="btn btn-secondary font-weight-bold finish-credentials">
            {% block __close %}{% endblock __close %}
          </button>
        </div>
      </div>
    </div>
  </div>

{% endblock to_log_view %}

{% block logged_view %}
  <div class="d-flex py-5 py-md-5 my-2 align-content-center flex-column flex-wrap container container-constata" >
    <div class="column g-6 bg-white text-dark rounded p-3">
      {% block __you_have_logged_in %}{% endblock __you_have_logged_in %}
    </div>
  </div>
{% endblock logged_view %}

{% block script %}
    const email = document.getElementById("email");
    const password = document.getElementById("password");
    const confirmPassword = document.getElementById("confirm-password");
    const masterPassword = document.getElementById("master-seed-password");
    const confirmMasterPassword = document.getElementById("confirm-master-seed-password");

    const modalEmail = document.getElementById("modal-email");
    const modalPassword = document.getElementById("modal-password");
    const modalMasterPassword = document.getElementById("modal-master-seed-password");
    const modal12palabras = document.getElementById("12-palabras");
    const modalConfirmation = document.getElementById("modal-confirmation");
    const modalFinish = document.getElementById("modal-finish");

    document.querySelectorAll(".to_kyc").forEach(e => {e.href = window.location.origin + "/kyc_request"})
    var config  = false;

    const showModalConfirmation = (modal) => {
      modalConfirmation.style.display = 'block';
    }

    const validatePassword = (event, pass, confirmation) => {
      event.preventDefault()
      event.stopPropagation()
      checkLength(pass);
      checkMatch(confirmation, pass);
      if (document.querySelectorAll(".is-invalid").length > 0) return false;
      else return true;
    }

    const createBitcoinWallet = () => {
      try {
        const network = networks[window.location.origin]?.network;
        const path = networks[window.location.origin]?.path;
        const backup_pass = masterPassword?.value;
  
        const mnemonic = bip39.generateMnemonic()
        const seed = bip39.mnemonicToSeedSync(mnemonic, backup_pass)
  
        const rootKey = bip32.fromSeed(seed, network)
        const account = rootKey.derivePath(path)
        const keyPair = account.derive(0).derive(0)
        const btcAddress = bitcoin.payments.p2pkh({
          pubkey: keyPair.publicKey,
          network: network,
        }).address
  
        document.getElementById("12-palabras-content").innerHTML = `<b>${mnemonic}</b>`;
  
        return [keyPair, btcAddress];
      } catch {
        showModal(modalError);
      }
    }

    const postCredentials = async (keyPair, btcAddress) => {
      let token = window.location.pathname.split("/create_email_credentials_token/")[1];
      let payload = "{{ email_address }}-" + token;
      const request = new Request(window.location.pathname, {
        method: 'POST',
        body: JSON.stringify({
          "signed_payload": getSignedPayload(keyPair, btcAddress, Buffer.from(payload)),
        }),
        headers: new Headers({ 'Content-Type': 'application/json' } ),
      });
      
      const result = await fetch(request);
      
      if(result.ok) {
        return true;
      } else {
        handleErrors(await result.text());
        return false;
      }
    }

    let encode = async (keyPair, daily_pass) => {
      const pass = (new TextEncoder()).encode(daily_pass);
      let keyData = new Uint8Array(32);
      keyData.set(pass, 0);

      const key = await AEAD.importKey(keyData, "AES-CMAC-SIV");
      const serialized = Buffer.from((new TextEncoder()).encode(keyPair.toWIF()), "hex");
      
      let nonce_data = new Uint8Array(16);
      window.crypto.getRandomValues(nonce_data);
      const encripted_key_encoded = await key.seal(serialized, nonce_data);

      let encrypted_key_buffer = new Uint8Array([...nonce_data, ...new Uint8Array(8),...encripted_key_encoded]);
      let encrypted_key = Buffer.from(encrypted_key_buffer, "hex").toString("hex");
      return encrypted_key
    }

    const downloadConfig = () => {
      showModal(modalLoading);

      if (config) {
        const a = document.createElement('a');
        a.href = "data:application/json;charset=utf-8," + config;
        a.download = "constata_conf.json";
        a.click();
        showModal(modalFinish);
        config = false;
      } else {
        showModal(modalError);
      }
      forms.forEach(form => form.reset());
      inputs.forEach(input => resetMark(input));
    }


    forms.forEach(form => {
      form.addEventListener('submit', async (event) => {
        if (form.classList.contains("form-password")) {
          if (!validatePassword(event, password, confirmPassword)) return;
          showModal(modalMasterPassword);
        }
        if (form.classList.contains("form-master-password")) {
          if (!validatePassword(event, masterPassword, confirmMasterPassword)) return;

          showModal(modalLoading);
          let [keyPair, btcAddress] = createBitcoinWallet();
          if (!await postCredentials(keyPair, btcAddress)) return;

          let encrypted_key = await encode(keyPair, password?.value);
          config = `{"public_key":"${keyPair.publicKey.toString("hex")}","encrypted_key":"${encrypted_key}","environment":"${networks[window.location.origin]?.environment}" }`;
          showModal(modal12palabras);
        }
      }, false)
    });
    
{% endblock script%}
