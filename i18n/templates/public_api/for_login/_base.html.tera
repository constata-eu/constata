{% extends "public_api/_layout.html.tera" %}

{% block head %}<script src="/static/bitcoin_libraries.js"></script>{% endblock head %}

{% block navbar %}
<div class="collapse navbar-collapse py-1 order-lg-3 d-lg-flex justify-content-end" id="checkLoginStatus_navbar">
  <div class="ml-4">
    <ul class="navbar-nav ml-auto d-flex text-md-right" data-toggle="collapse" data-target=".navbar-collapse">
      <li class="nav-item mb-0">
        <div id="logged" class="text-dark font-italic font-weight-bold views" style="display:none;text-transform:none;"></div>
        <button id="login" class="btn btn-blue btn-md btn-block font-weight-bold views" onclick="showModal(modalLogin)" style="display:none;">LOGIN</button>
      </li>
    </ul>
  </div>
</div>
{% endblock %}

{% block body %}
  <div class="views" id="person-logged" style="display:none;">
    {% block logged_view %}
    {% endblock logged_view %}
  </div>

  <div class="views" id="person-not-logged" style="display:none;">
    {% block to_log_view %}
    {% endblock to_log_view %}
  </div>
  
  {% block other_body %}
  {% endblock other_body %}

  <div class="modal text-dark" tabindex="-1" id="modal-login" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            {% block __enter_credentials %}{% endblock __enter_credentials %}
          </h5>
        </div>
        <div class="modal-body">
          <form class="needs-validation form-login" novalidate>
            <div class="col-md m-1">
              <label for="config-login" class="input-group-text">
                {% block __select_credentials %}{% endblock __select_credentials %}
              </label>
              <input id="config-login" class="form-control" type="file" accept=".json" />
              <div class="invalid-feedback">
                {% block __must_select_file %}{% endblock __must_select_file %}
              </div>
            </div>
            <div class="col-md m-1">
              <label for="password-login" class="form-label">
                {% block __password %}{% endblock __password %}
              </label>
              <input id="password-login" class="form-control" type="password" />
              <div class="invalid-feedback">
                {% block __eight_chars_min %}{% endblock __eight_chars_min %}
              </div>
            </div>
            <div class="col-md m-1 m-t-2">
              <button class="btn btn-blue btn-lg btn-block font-weight-bold" type="submit">
                {% block __login %}{% endblock __login %}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-logout" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-body">
          <p>
            {% block __confirm_leave %}{% endblock __confirm_leave %}
          </p>
        </div>
        <div class="modal-footer">
          <button onclick="hideAllModals()" class="btn btn-secondary font-weight-bold">
            {% block __back %}{% endblock __back %}
          </button>
          <button onclick="handleLogout()" class="btn btn-blue btn-primary font-weight-bold">
            {% block __logout %}{% endblock __logout %}
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-daily-password" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            {% block __enter_password %}{% endblock __enter_password %}
          </h5>
        </div>
        <div class="modal-body">
          <form class="needs-validation form-daily-password" novalidate>
            <div class="col-md m-1">
              <label for="daily-password" class="form-label">
                {% block __daily_password %}{% endblock __daily_password %}
              </label>
              <input id="daily-password" class="form-control" type="password" />
              <div class="invalid-feedback">
                {% block __daily_eight_chars_min %}{% endblock __daily_eight_chars_min %}
              </div>
            </div>
            <div class="col-md m-1 m-t-2">
              <button class="btn btn-blue btn-lg btn-block font-weight-bold" type="submit">
                {% block __confirm %}{% endblock __confirm %}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-loading" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered" style="width: 35px">
      <div class="modal-content">
        <div class="spinner-border" role="status">
          <span class="sr-only">
            {% block __loading %}{% endblock __loading %}
          </span>
        </div>
      </div>
    </div>
  </div>

  <div class="modal text-dark" tabindex="-1" id="modal-error" style="background: rgba(150, 170, 140, .5)">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content text-danger font-weight-bold">
        <div class="modal-body">
          <p>
            {% block __error_ocurred %}{% endblock __error_ocurred %}
          </p>
          <p id="error-info"></p>
        </div>
        <div class="modal-footer">
          <button type="button" onclick="hideAllModals()" class="btn btn-secondary font-weight-bold">
            {% block __close %}{% endblock __close %}
          </button>
        </div>
      </div>
    </div>
  </div>

  <button id="finish-login" hidden></button>

  <script>
    //Import dependencies
    const { AEAD } = require("miscreant");
    const ecc = require('tiny-secp256k1');
    const { BIP32Factory } = require('bip32');
    const bip32 = BIP32Factory(ecc);
    const bip39 = require('bip39');
    const bitcoin = require('bitcoinjs-lib');
    const request = require('request');
    const bitcoinMessage = require("bitcoinjs-message");
    const { Buffer } = require("buffer");
    const { ECPairFactory } = require('ecpair');
    const ECPair = ECPairFactory(ecc);

    const forms = document.querySelectorAll('.needs-validation');
    const inputs = document.querySelectorAll('input');
    const passwordLogin = document.getElementById("password-login");
    const configLogin = document.getElementById("config-login");

    const views = document.querySelectorAll('.views');
    const viewLogged = document.getElementById("person-logged");
    const viewNotLogged = document.getElementById("person-not-logged");
    const login = document.getElementById("login");
    const logged = document.getElementById("logged");

    const modals = document.querySelectorAll('.modal');
    const modalLogin = document.getElementById("modal-login");
    const modalLogout = document.getElementById("modal-logout");
    const modalDailyPassword = document.getElementById("modal-daily-password");
    const dailyPassword = document.getElementById("daily-password");
    const modalLoading = document.getElementById("modal-loading");
    const modalError = document.getElementById("modal-error");

    const hideAllModals = () => {
      modals.forEach(modal => modal.style.display = "none");
    }
    const showModal = (modal) => {
      hideAllModals();
      modal.style.display = "block";
    }

    const markValid = (element) => {
      element?.classList?.remove('is-invalid');
      element?.classList?.add('is-valid');
    }
    const markInvalid = (element) => {
      element?.classList?.remove('is-valid');
      element?.classList?.add('is-invalid');
    }
    const resetMark = (element) => {
      element?.classList?.remove('is-valid');
      element?.classList?.remove('is-invalid');
    }

    const checkLength = (element) => {
      if (element?.value?.length >= 8) markValid(element);
      else markInvalid(element);
    }
    const checkMatch = (element1, element2) => {
      let elementValue = element1?.value;
      if (elementValue.length >= 8 && elementValue === element2?.value) markValid(element1);
      else markInvalid(element1);
    }

    const hideAllViews = () => {
      views.forEach(view => view.style.display = "none");
    }
    const showView = (view, log) => {
      hideAllViews();
      hideAllModals();
      view.style.display = "block";
      if (log) log.style.display = "block";
    }

    const validateLogin = (event, pass, cred) => {
      event.preventDefault()
      event.stopPropagation()
      checkLength(pass);
      checkLength(cred);
      if (document.querySelectorAll(".is-invalid").length > 0) return false;
      else return true;
    }

    document.querySelector(".navbar-toggler.for-login")?.addEventListener('click', () => {
      showModal(modalLogin);
    })

    document.querySelector(".navbar-toggler.for-logout")?.addEventListener('click', () => {
      showModal(modalLogout);
    })

    const networks = {
      "http://localhost:8000": {
        environment: 'development',
        network: bitcoin.networks.regtest,
        path: `m/49'/1'/0'/0`,
      },
      "https://api-staging.constata.eu": {
        environment: 'staging',
        network: bitcoin.networks.testnet,
        path: `m/49'/1'/0'/0`,
      },
      "https://api.constata.eu": {
        environment: 'production',
        network: bitcoin.networks.bitcoin,
        path: `m/49'/0'/0'/0`,
      },
    }

    function getStorage() {
      return {
        "public_key": localStorage.getItem("public_key"),
        "encrypted_key": localStorage.getItem("encrypted_key"),
        "environment": localStorage.getItem("environment"),
        "address": localStorage.getItem("address"),
      };
    }
    
    function checkStorage() {
      for(const k of ['public_key', 'encrypted_key', 'environment', 'address']) {
        if (localStorage.getItem(k) == undefined) return false;
      }
      return true;
    }

    function clearStorage() {
      window.pass = undefined;
      for(const k of ['public_key', 'encrypted_key', 'environment', 'address']) {
        localStorage.removeItem(k);
      }
    }

    function getSignedPayload(keyPair, address, message) {
      const signature = bitcoinMessage.sign(message, keyPair.privateKey, keyPair.compressed)
      return {
        payload: message.toString("base64"),
        signer: address,
        signature: signature.toString("base64"),
      };
    }

    async function getKeyPair(encrypted_key, passwordLogin, environment) {
      const network = networks[window.location.origin].network;
      const pass = (new TextEncoder()).encode(passwordLogin);
      let keyData = new Uint8Array(32);
      keyData.set(pass, 0);
      const key = await AEAD.importKey(keyData, "AES-CMAC-SIV");
      const serialized = Buffer.from(encrypted_key, "hex");

      try {
        const pkwif = await key.open(serialized.slice(24), serialized.slice(0, 16));
        const keyPair = ECPair.fromWIF((new TextDecoder()).decode(pkwif), network); 
        const { address } = bitcoin.payments.p2pkh({
          pubkey: keyPair.publicKey,
          network: network,
        });
        return [keyPair, address];
        
      } catch {
        showModal(modalDailyPassword);
      }
    }

    async function getRawAuthorization(url, method, body) {
      if (!window.pass) return;
      if (!localStorage.getItem('encrypted_key')) return;
      const conf = getStorage();
      const [keyPair, address] = await getKeyPair(conf.encrypted_key, window.pass, conf.environment);
      const {pathname, search } = new URL(url, document.location.origin);
    
      async function sha256sum(plaintext){
        return Buffer.from(await crypto.subtle.digest('SHA-256', (new TextEncoder()).encode(plaintext))).toString("hex")
      }
    
      const payload = Buffer.from(JSON.stringify({
        "path": pathname,
        "method": method,
        "nonce": Date.now(),
        "body_hash": body ? (await sha256sum(body)) : null,
        "query_hash": search.length > 1 ? (await sha256sum(search.substr(1))) : null
      }));
    
      const signed_payload = getSignedPayload(keyPair, address, Buffer.from(payload));
    
      return JSON.stringify(signed_payload);
    }

    const createPostWithAuth = async (path, body) => {
      return new Request(path, {
        method: 'POST',
        body,
        headers: new Headers({ 'Authentication': await getRawAuthorization(path, "POST", body) }),
      });
    }

    const createGetWithAuth = async (path) => {
      return new Request(path, {
        method: 'GET',
        headers: new Headers({ 'Authentication': await getRawAuthorization(path, "GET", null) }),
      });
    }

    const handleLogin = async ({ conf, passwordLogin }) => {
      const [keyPair, address] = await getKeyPair(conf.encrypted_key, passwordLogin, conf.environment);
      if (Buffer.from(conf.public_key, 'hex').equals(keyPair.publicKey)) {
        
        const request = new Request(`${window.location.origin}/signup`, {
          method: 'POST',
          body: JSON.stringify({
            "signed_payload": getSignedPayload(keyPair, address, Buffer.from("Hello Constata.eu")),
          }),
          headers: new Headers({ 'Content-Type': 'application/json' } ),
        });
        
        const result = await fetch(request);
        
        if(result.ok) {
          localStorage.setItem("public_key", conf.public_key);
          localStorage.setItem("encrypted_key", conf.encrypted_key);
          localStorage.setItem("environment", conf.environment);
          localStorage.setItem("address", address);
          window.pass = passwordLogin;
          return true;
        }
      }
      return false;
    }

    const handleLogout = async () => {
      clearStorage();
      hideAllModals();
      checkLoginStatus();
    }

    const handleErrors = (response) => {
      let errorInfo = document.getElementById("error-info");
      try {
        let message = JSON.parse(response).error.message;
        switch (message) {
          case "this_user_already_has_a_pending_kyc_request":
            return showView(document.getElementById("other-body"), logged);
          case "this_credentials_token_was_already_used":
            errorInfo.innerText = "{%- block __link_already_used -%}{%- endblock __link_already_used -%}"
            break;
          default:
            errorInfo.innerText = "";
        }
      } catch {
        errorInfo.innerText = "";
      }
      showModal(modalError);
    }

    forms.forEach(form => {
      form.addEventListener('submit', async (event) => {
        if (form.classList.contains("form-login")) {
          if (!validateLogin(event, passwordLogin, configLogin)) return;
          showModal(modalLoading);
          let fileAsString = await configLogin.files[0].text();
          let credentials = JSON.parse(fileAsString);
          let passwordValue = passwordLogin?.value;
          let response = await handleLogin({"conf": credentials, "passwordLogin": passwordValue});
          forms.forEach(form => form.reset());
          inputs.forEach(input => resetMark(input));
          if (!response){
            return showModal(modalError);
          }
          hideAllModals();
          checkLoginStatus();
          document.getElementById("finish-login").click();
        }
      });
    });

    const checkLoginStatus = () => {
      if (checkStorage()) {
        document.querySelector(".navbar-toggler.for-login")?.classList?.replace("d-block", "d-none");
        document.querySelector(".navbar-toggler.for-logout")?.classList?.replace("d-none", "d-block");
        let storage = getStorage();
        logged.innerHTML = `<div>
          <label for="logout">
            <span role="button" class="text-secondary" style="position:relative;bottom:7px;">&times;</span>
            <button id="logout" hidden onclick="showModal(modalLogout)"></button>
          </label>
          {%- block __logged_in_as -%}{%- endblock __logged_in_as -%}
          </div>
          <div>${storage.address}</div>`;
        showView(viewLogged, logged);
      } else {
        document.querySelector(".navbar-toggler.for-logout")?.classList?.replace("d-block", "d-none");
        document.querySelector(".navbar-toggler.for-login")?.classList?.replace("d-none", "d-block");
        showView(viewNotLogged, login);
      }
    }
    
    checkLoginStatus();

    {% block script %}
    {% endblock script %}
  </script>

{% endblock body %}
