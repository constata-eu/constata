use super::*;

#[derive(GraphQLObject)]
#[graphql(description = "This object retrieves a certificate in verifiable HTML format authenticating with a special token, generated by our backend. This links can be sent to anyone and they will download the verifiable HTML. NOTICE If you need to download the verifiable HTML for any certificate authenticating to our API with your credentials, use the Issuances or Attestations endpoints instead.")]
pub struct Proof {
  #[graphql(description = "Id of the certification ")]
  pub id: i32,
  #[graphql(description = "Certificate HTML contents as text")]
  pub html: String,
}

impl Proof {
  pub async fn proof(context: &Context) -> FieldResult<Proof> {
    if let AuthMethod::Token { ref token } = context.current_person.method {
      let download_proof_link = context.site.download_proof_link()
        .active(token.attrs.token.clone()).one().await?;

      Ok(Proof{
        id: download_proof_link.attrs.id,
        html: download_proof_link.html_proof(&context.key, context.lang).await?,
      })
    } else {
      Err(field_error("access", "invalid_download_proof_link"))
    }
  }
}
