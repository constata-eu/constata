module.exports = {
  en: {
    admin: {
      errors: {
        default: "Error: An error has ocurred",
        invalidPassword: "Invalid password or one-time password",
      },
    },
    resources: {
      Bulletin: {
        name: 'Bulletin |||| Bulletins',
        fields: {
          id: 'Nº',
          state: 'State',
          startedAt: 'Started At',
          hash: 'Hash',
          transactionHash: 'Transaction Hash',
          documentsCount: 'Documents Count',
          transaction: 'Transaction',
          blockHash: 'Block Hash',
          blockTime: 'Block Time',
          documentsHashes: 'Documents Hashes',
          downloadHashes: 'Download Hashes',
          states: {
            draft: "Draft",
            proposed: "Proposed",
            submitted: "Submitted",
            published: "Published",
          },
          idEq: 'By Nº:',
          stateEq: 'By State:',
          hashEq: 'By Hash:',
          transactionHashEq: 'By Transaction Hash:',
          blockHashEq: 'By Block Hash:',
        },
      },
      Document: {
        name: 'Document |||| Documents',
        many: 'Documents',
        fields: {
          id: 'ID',
          orgId: 'Organization',
          personId: 'Person',
          storyId: 'Story',
          bulletinId: 'Bulletin',
          createdAt: 'Created At',
          fundedAt: 'Funded At',
          bulletinState: 'Bulletin State',
          sourcedFrom: 'Sourced From',
          sourcedFroms: {
            EMAIL: "Email",
            API: "Api",
            TELEGRAM: "Telegram",
            INTERNAL: "Internal",
          },
          authorId: 'Author',
          funded: 'Funded?',
          cost: 'Cost',
          giftId: 'Gift',
          downloadHtml: 'Download HTML',
          idLike: 'By ID:',
          orgIdEq: 'By Organization:',
          personIdEq: 'By Person:',
          bulletinIdEq: 'By Bulletin:',
          storyIdEq: 'By Story:',
          authorIdEq: 'By Author:',
          sourcedFromEq: 'By Source:',
          fundedEq: 'Funded?',
        },
        fundedEqAll: 'All',
        fundedEqTrue: 'Only funded',
        fundedEqFalse: 'Only not funded',
      },
      Story: {
        name: 'Story |||| Stories',
        many: 'Stories',
        fields: {
          id: 'Nº',
          orgId: 'Organization',
          markers: 'Markers',
          openUntil: 'Open Until',
          totalDocumentsCount: 'Total Documents Count',
          publishedDocumentsCount: 'Published Documents Count',
          privateMarkers: 'Private Markers',
          idEq: 'By Nº:',
          orgIdEq: 'By Organization:',
        },
      },
      Org: {
        name: 'Organization |||| Organizations',
        fields: {
          id: 'ID',
          fundedTokens: 'Funded Documents',
          parkedTokens: 'Parked Documents',
          totalDocumentTokens: 'Total Documents',
          tokenBalance: 'Total Balance',
          missingTokens: 'Missing Tokens',
          subscriptionId: 'Subscription',
          stripeCustomerId: 'Stripe Customer',
          pendingInvoices: 'Pending Invoices',
          publicName: "Public Name",
          logo_url: "Logo URL",
          firstParkedDate: 'First Parked Date',
          lastParkedDate: 'Last Parked Date',
          pendingInvoiceLinkUrl: "InvoiceLink URL",
          idEq: 'By ID:',
          publicNameLike: "By Public Name:",
          fundedEq: 'Funded?',
          paidEq: 'Paid?',
          expiredEq: 'Expired?',
          invoiceIdIsSet: 'Expired?',
        },
        fundedEqAll: 'All',
        fundedEqTrue: 'Only funded',
        fundedEqFalse: 'Only not funded',
        paidEqAll: 'All',
        paidEqTrue: 'Only paid',
        paidEqFalse: 'Only not paid',
        expiredEqAll: 'All',
        expiredEqTrue: 'Only expired',
        expiredEqFalse: 'Only not expired',
        invoiceIdIsSetAll: 'All',
        invoiceIdIsSetTrue: 'Only expired',
        invoiceIdIsSetFalse: 'Only not expired',
      },
      Person: {
        name: 'Person |||| Persons',
        many: 'Persons',
        fields: {
          id: 'ID',
          orgId: 'Organization',
          pubkey: 'Public Key',
          emailAddress: 'Email',
          registrationDate: 'Registration Date',
          not_accepted_yet: "Not accepted. Click here.",
          isTermsAccepted: "Terms Accepted?",
          termsUrl: "Terms Acceptance",
          already_accepted: "Terms were accepted",
          pendingInvoiceLinkUrl: "InvoiceLink URL",
          idEq: 'By ID:',
          orgIdEq: 'By Organization:',
          fundedEq: 'Funded?',
          stateEq: 'By State:',
        },
        fundedEqAll: 'All',
        fundedEqTrue: 'Only funded',
        fundedEqFalse: 'Only not funded',
      },
      EmailAddress: {
        name: 'Email |||| Emails',
        fields: {
          personId: 'Person',
          orgId: 'Organization',
          bulletinId: 'Bulletin',
          maybeSpoofed: 'Maybe Spoofed',
          evidence: 'Evidence',
          addressLike: 'By Address:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          bulletinIdEq: 'By Bulletin:',
        },
      },
      Pubkey: {
        name: 'Public Key |||| Public Keys',
        fields: {
          id: 'Public Key',
          personId: 'Person',
          orgId: 'Organization',
          bulletinId: 'Bulletin',
          hash: 'Hash',
          evidencePayload: 'Evidence Payload',
          evidenceSignature: 'Evidence Signature',
          signatureHash: 'Signature Hash',
          idLike: 'By Public Key:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          bulletinIdEq: 'By Bulletin:',
        },
      },
      Template: {
        name: 'Template |||| Templates',
        many: 'Templates',
        fields: {
          id: 'Nº',
          personId: 'Person',
          orgId: 'Organization',
          name: 'Name',
          kind: 'Kind',
          customMessage: 'Custom Message',
          ogTitleOverride: 'Metadata title',
          idEq: 'By Nº:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          nameLike: 'By Name:',
          kindEq: 'By Kind:',
          kinds: {
            diploma: 'Diploma',
            attendance: 'Attendance',
            badge: "Badge"
          }
        },
        validateJson: 'If you fill in this field, it must be a json',
        add_schema_field: {
          button: "Add schema attribute",
          name: "Name",
          name_label: "Name of your attribute",
          common: "Common",
          common_label: "Is it a general attribute to all certificates?",
          optional: "Optional",
          optional_label: "Is it an attribute that can be empty?",
          label: "Label",
          label_label: "Name to be displayed to the user",
          help: "Help text",
          help_label: "Help text to display to the user",
          sample: "Sample",
          sample_label: "Example that will go in the sample csv file",
          accept: "Accept",
          cancel: "Cancel",
        }
      },
      Payment: {
        name: 'Payment |||| Payments',
        many: 'Payments',
        fields: {
          id: 'Nº',
          orgId: 'Organization',
          invoiceId: 'Invoice',
          paymentSource: 'Payment Source',
          paymentSources: {
            BANK_BBVA: "BankBbva",
            STRIPE: "Stripe",
            BTC_PAY: "BtcPay",
          },
          tokens: 'Tokens',
          amount: 'Amount',
          createdAt: 'Created At',
          fees: 'Fees',
          clearingData: 'Clearing Data',
          idEq: 'By Nº:',
          orgIdEq: 'By Organization:',
          invoiceIdEq: 'By Invoice:',
          paymentSourceEq: 'By Payment Source:',
          tokensEq: 'By Tokens equal to:',
          tokensGt: 'By Tokens greater than:',
          tokensLt: 'By Tokens less than:',
          amountEq: 'By Amount equal to:',
          amountGt: 'By Amount greater than:',
          amountLt: 'By Amount less than:',
        },
      },
      Subscription: {
        name: 'Subscription |||| Subscriptions',
        one: 'Subscription',
        fields: {
          orgId: 'Organization',
          planName: 'Plan Name',
          defaultPaymentSource: 'Default Payment Source',
          maxMonthlyGift: 'Max Monthly Gift',
          monthlyGiftRemainder: 'Monthly Gift Remainder',
          pricePerToken: 'Price Per Token',
          isActive: 'Is Active?',
          invoicingDay: 'Invoicing Day',
          requiredTokenPurchase: 'Required Token Purchase',
          stripeSubscriptionId: 'Stripe Subscription',
          personIdEq: 'By Person:',
          planNameLike: 'By Plan Name:',
          defaultPaymentSourceEq: 'By Default Payment Source:',
          maxMonthlyGiftEq: 'By Max Monthly Gift equal to:',
          maxMonthlyGiftGt: 'By Max Monthly Gift greater than:',
          maxMonthlyGiftLt: 'By Max Monthly Gift less than:',
          pricePerTokenEq: 'By Price Per Token equal to:',
          pricePerTokenGt: 'By Price Per Token greater than:',
          pricePerTokenLt: 'By Price Per Token less than:',
          isActiveEq: 'Is Active?'
        },
        isActiveEqAll: 'All',
        isActiveEqTrue: 'Only active',
        isActiveEqFalse: 'Only not active',
      },
      Invoice: {
        name: 'Invoice |||| Invoices',
        many: 'Invoices',
        fields: {
          id: 'Nº',
          orgId: 'Organization',
          paymentId: 'Payment',
          paymentSource: 'Payment Source',
          paid: 'Paid?',
          createdAt: 'Created At',
          tokens: 'Tokens',
          amount: 'Amount',
          description: 'Description',
          externalId: 'External ID',
          url: 'URL',
          notifiedOn: 'Notified On',
          expired: 'Expired?',
          idEq: 'By Nº:',
          orgIdEq: 'By Organization:',
          paymentIdEq: 'By Payment:',
          paymentSourceEq: 'By Payment Source:',
          tokensEq: 'By Tokens equal to:',
          tokensGt: 'By Tokens greater than:',
          tokensLt: 'By Tokens less than:',
          amountEq: 'By Amount equal to:',
          amountGt: 'By Amount greater than:',
          amountLt: 'By Amount less than:',
          paidEq: 'Paid?',
          expiredEq: 'Expired?',
        },
        paidEqAll: 'All',
        paidEqTrue: 'Only paid',
        paidEqFalse: 'Only not paid',
        expiredEqAll: 'All',
        expiredEqTrue: 'Only expired',
        expiredEqFalse: 'Only not expired',
      },
      InvoiceLink: {
        name: 'InvoiceLink |||| InvoiceLinks',
        create: 'Create an InvoiceLink',
        many: 'InvoiceLinks',
        fields: {
          id: 'Nº',
          orgId: 'Organization',
          invoiceId: 'Invoice',
          url: 'URL',
          parkedTokens: 'Parked Documents',
          firstParkedDate: 'First Parked Date',
          lastParkedDate: 'Last Parked Date',
          missingTokens: 'Missing Tokens',
          idEq: 'By Nº:',
          orgIdEq: 'By Organization:',
          invoiceIdEq: 'By Invoice:',
          invoiceIdIsSet: 'Expired?',
        },
        invoiceIdIsSetAll: 'All',
        invoiceIdIsSetTrue: 'Only expired',
        invoiceIdIsSetFalse: 'Only not expired',
      },
      Gift: {
        name: 'Gift |||| Gifts',
        create: 'Create a Gift',
        many: 'Gifts',
        fields: {
          id: 'Nº',
          orgId: 'Organization',
          tokens: 'Tokens',
          createdAt: 'Created At',
          reason: 'Reason',
          idEq: 'By Nº',
          orgIdEq: 'By Organization:',
          tokensEq: 'By Tokens equal to:',
          tokensGt: 'By Tokens greater than:',
          tokensLt: 'By Tokens less than:',
        },
      },
      TermsAcceptance: {
        name: 'Terms Acceptance |||| Terms Acceptances',
        fields: {
          id: 'ID',
          personId: 'Person',
          orgId: 'Organization',
          parkedTokens: 'Parked Documents',
          firstParkedDate: 'First Parked Date',
          lastParkedDate: 'Last Parked Date',
          pendingInvoiceLinkUrl: 'InvoiceLink URL',
          accepted: 'Accepted',
          bulletinId: 'Bulletin',
          hash: 'Hash',
          evidence: 'Evidence',
          idEq: 'By ID:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          acceptedIsSet: 'Accepted?',
        },
        acceptedIsSetAll: 'All',
        acceptedIsSetTrue: 'Only accepted',
        acceptedIsSetFalse: 'Only not accepted',
      },
      KycRequest: {
        name: 'Kyc Request |||| Kyc Requests',
        one: 'Kyc Request',
        fields: {
          id: 'ID',
          personId: 'Person',
          orgId: 'Organization',
          kycEndorsementId: 'Kyc Endorsement',
          createdAt: 'Created At',
          state: 'State',
          states: {
            pending: "Pending",
            processed: "Processed",
          },
          name: 'Name',
          lastName: 'Last Name',
          idType: 'ID Type',
          idNumber: 'ID Number',
          idTypeAndNumber: 'ID Type / Number',
          country: 'Country',
          birthdate: 'Birthdate',
          nationality: 'Nationality',
          jobTitle: 'Job Title',
          legalEntityName: 'Legal Entity Name',
          legalEntityCountry: 'Legal Entity Country',
          legalEntityRegistration: 'Legal Entity Registration',
          legalEntityTaxId: 'Legal Entity Tax ID',
          legalEntityLinkedinId: 'Legal Entity Linkedin ID',
          idEq: 'By ID:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          kycEndorsementIdEq: 'By Kyc Endorsement:',
          stateEq: 'By State:',
          nameLike: 'By Name:',
          lastNameLike: 'By Last Name:',
          idTypeLike: 'By ID Type:',
          idNumberLike: 'By ID Number:',
          countryLike: 'By Country:',
          jobTitleLike: 'By Job Title:',
          downloadEvidence: 'Download Attachments',
          bool: {
            last_name: 'Last Name',
            id_type: 'ID Type',
            id_number: 'ID Number',
            id_type_and_number: 'ID Type / Number',
            country: 'Country',
            birthdate: 'Birthdate',
            nationality: 'Nationality',
            job_title: 'Job Title',
            legal_entity_name: 'Legal Entity Name',
            legal_entity_country: 'Legal Entity Country',
            legal_entity_registration: 'Legal Entity Registration',
            legal_entity_tax_id: 'Legal Entity Tax ID',
          },
        },
        messageForPartialAcceptance: 'These are the KYC changes suggested by the customer. Select which ones you want to apply.',
      },
      KycEndorsement: {
        name: 'Kyc Endorsement |||| Kyc Endorsements',
        create: 'Create a Kyc Endorsement',
        one: 'Kyc Endorsement',
        fields: {
          id: 'Nº',
          personId: 'Person',
          orgId: 'Organization',
          storyId: 'Story',
          name: 'Name',
          lastName: 'Last Name',
          idType: 'ID Type',
          idNumber: 'ID Number',
          idTypeAndNumber: 'ID Type / Number',
          country: 'Country',
          birthdate: 'Birthdate',
          nationality: 'Nationality',
          jobTitle: 'Job Title',
          legalEntityName: 'Legal Entity Name',
          legalEntityCountry: 'Legal Entity Country',
          legalEntityRegistration: 'Legal Entity Registration',
          legalEntityTaxId: 'Legal Entity Tax ID',
          legalEntityLinkedinId: 'Legal Entity Linkedin ID',
          createdAt: 'Created At',
          idEq: 'By Nº:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          nameLike: 'By Name:',
          lastNameLike: 'By Last Name:',
          idTypeLike: 'By ID Type:',
          idNumberLike: 'By ID Number:',
          countryLike: 'By Country:',
          jobTitleLike: 'By Job Title:',
        },
      },
      PubkeyDomainEndorsement: {
        name: 'Domain Endorsement |||| Domain Endorsements',
        many: 'Domain Endorsements',
        fields: {
          id: 'Nº',
          personId: 'Person',
          orgId: 'Organization',
          state: 'State',
          states: {
            pending: 'Pending',
            accepted: 'Accepted',
            failed: 'Failed',
          },
          pubkeyId: 'Pubkey',
          domain: 'Domain',
          requestSignature: 'Request Signature',
          attempts: 'Attemps',
          next_attempt: 'Next Attempt',
          bulletinId: 'Bulletin',
          idEq: 'By Nº:',
          personIdEq: 'By Person:',
          orgIdEq: 'By Organization:',
          stateEq: ' By State:',
          pubkeyIdLike: 'By Pubkey:',
          domainLike: 'By Domain:',
        },
      },
      OrgDeletion: {
        name: 'Organization Deletion |||| Organization Deletions',
        create: 'Request a Organization Deletion',
        edit: 'Cancel Organization Deletion',
        fields: {
          id: 'Nº',
          orgId: 'Organization',
          storyId: 'Story',
          reason: 'Reason',
          reasons: {
            USER_REQUEST: 'User Request',
            CONSTATA_DECISION: 'Constata Decision',
            INACTIVITY: 'Inactivity',
          },
          description: 'Description',
          completed: 'Completed',
          approvingAdminUser: 'Approving Admin User',
          startedAt: 'Started At',
          idEq: 'By Nº:',
          orgIdEq: 'By Organization:',
          storyIdEq: 'By Story:',
          reasonEq: ' By Reason:',
          completedEq: 'By Completed:',
        },
      },
      MissingToken: {
        name: 'Missing Tokens',
        fields: {
          id: 'Organization',
          publicName: 'Public Name',
          parkedTokens: 'Parked Documents',
          tokenBalance: 'Token Balance',
          missingTokens: 'Missing Tokens',
          noTyc: 'TyC not accepted',
          firstParkedDate: 'First Parked Date',
          lastParkedDate: 'Last Parked Date',
          invoiceUrl: 'URL',
        },
      },
      TopTen: {
        name: 'Top Ten',
        fields: {
          id: 'Organization',
          fundedTokens: 'Funded Documents',
          parkedTokens: 'Parked Documents',
          tokenBalance: 'Token Balance',
          missingTokens: 'Missing Tokens',
        },
      },
      AdminUser: {
        name: 'Admin User |||| Admin Users',
        create: 'Create an Admin User',
        fields: {
          id: 'ID',
          username: 'Username',
          password: 'Password',
          otpSeed: 'OTP Seed',
          otp: 'OTP',
          role: 'Role',
          createdAt: 'Created At',
          usernameLike: "By Username:",
          roleEq: "By Role:",
          roles: {
            admin: 'Admin',
            superadmin: 'SuperAdmin',
          },
        },
      },
      ChangePassword: {
        name: 'Change Password',
        password: 'Password',
        newPassword: 'New Password',
        reEnterNewPassword: 'Re-enter new password',
        otp: 'OTP',
        confirmationFailed: 'Passwords must match',
      },
      actions: {
        createInvoiceLink: 'Create InvoiceLink',
        createGift: 'Create Gift',
        createKycEndorsement: 'Create Kyc Endorsement',
        createTemplate: 'Create Template',
        requestOrgDeletion: 'Request Org Deletion',
        cancelOrgDelete: 'Cancel Deletion',
        orgDeletionMessage: 'Be careful, once you request to delete an organization. The organization will not be able to access their own data.',
        orgDeletionCancelMessage: 'You are about to cancel the request to delete the organization, making all their data available again.',
        physicalDeletionConfirm: 'Be careful, you are about to permanently delete all data for this organization.',
        physicalDeletionCompleted: 'Physical deletion completed.',
        physicalDelete: 'Physical Delete',
        updated: 'Element updated',
        created: 'Element created',
        changePassword: 'Change Password',
        loading: 'Loading...',
        processKycRequest: 'Process',
        acceptKycRequest: 'Select All',
        rejectKycRequest: 'Select None',
        kycRequestTitle: 'You are about to PROCESS this Kyc Request',
        KycRequestContent: 'Are you sure? This action cannot be undone and you will need to contact the user.',
        copy_to_clipboard: 'Link copied to clipboard',
        click_here: 'Click here to visit',
        details: 'Details',
      },
    },
    patch: {
      auth: {
        auth_check_error: "Por favor inicie sesión para continuar"
      },
      action: {
        unselect: "Deseleccionar"
      },
      navigation: {
        skip_nav: "Saltar al contenido",
        page_rows_per_page: "Filas por página:"
      }
    }
  }
};
